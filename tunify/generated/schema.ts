// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Song extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Song entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Song must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Song", id.toString(), this);
    }
  }

  static load(id: string): Song | null {
    return changetype<Song | null>(store.get("Song", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get Name(): string {
    let value = this.get("Name");
    return value!.toString();
  }

  set Name(value: string) {
    this.set("Name", Value.fromString(value));
  }

  get FileType(): string {
    let value = this.get("FileType");
    return value!.toString();
  }

  set FileType(value: string) {
    this.set("FileType", Value.fromString(value));
  }

  get Genre(): string {
    let value = this.get("Genre");
    return value!.toString();
  }

  set Genre(value: string) {
    this.set("Genre", Value.fromString(value));
  }

  get OwnerId(): BigInt {
    let value = this.get("OwnerId");
    return value!.toBigInt();
  }

  set OwnerId(value: BigInt) {
    this.set("OwnerId", Value.fromBigInt(value));
  }

  get OwnerAddress(): Bytes {
    let value = this.get("OwnerAddress");
    return value!.toBytes();
  }

  set OwnerAddress(value: Bytes) {
    this.set("OwnerAddress", Value.fromBytes(value));
  }

  get FileLink(): string {
    let value = this.get("FileLink");
    return value!.toString();
  }

  set FileLink(value: string) {
    this.set("FileLink", Value.fromString(value));
  }

  get Stars(): BigInt {
    let value = this.get("Stars");
    return value!.toBigInt();
  }

  set Stars(value: BigInt) {
    this.set("Stars", Value.fromBigInt(value));
  }

  get Likes(): BigInt {
    let value = this.get("Likes");
    return value!.toBigInt();
  }

  set Likes(value: BigInt) {
    this.set("Likes", Value.fromBigInt(value));
  }

  get Date(): string {
    let value = this.get("Date");
    return value!.toString();
  }

  set Date(value: string) {
    this.set("Date", Value.fromString(value));
  }

  get StarredAddresses(): Array<Bytes> | null {
    let value = this.get("StarredAddresses");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set StarredAddresses(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("StarredAddresses");
    } else {
      this.set("StarredAddresses", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get LikesAddresses(): Array<Bytes> | null {
    let value = this.get("LikesAddresses");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set LikesAddresses(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("LikesAddresses");
    } else {
      this.set("LikesAddresses", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get Name(): string {
    let value = this.get("Name");
    return value!.toString();
  }

  set Name(value: string) {
    this.set("Name", Value.fromString(value));
  }

  get Email(): string {
    let value = this.get("Email");
    return value!.toString();
  }

  set Email(value: string) {
    this.set("Email", Value.fromString(value));
  }

  get Adddress(): Bytes {
    let value = this.get("Adddress");
    return value!.toBytes();
  }

  set Adddress(value: Bytes) {
    this.set("Adddress", Value.fromBytes(value));
  }

  get TotalUploaded(): BigInt {
    let value = this.get("TotalUploaded");
    return value!.toBigInt();
  }

  set TotalUploaded(value: BigInt) {
    this.set("TotalUploaded", Value.fromBigInt(value));
  }

  get AlbumSongs(): BigInt {
    let value = this.get("AlbumSongs");
    return value!.toBigInt();
  }

  set AlbumSongs(value: BigInt) {
    this.set("AlbumSongs", Value.fromBigInt(value));
  }

  get Followers(): BigInt {
    let value = this.get("Followers");
    return value!.toBigInt();
  }

  set Followers(value: BigInt) {
    this.set("Followers", Value.fromBigInt(value));
  }

  get FollowersAddresses(): Array<Bytes> | null {
    let value = this.get("FollowersAddresses");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set FollowersAddresses(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("FollowersAddresses");
    } else {
      this.set("FollowersAddresses", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get Date(): string {
    let value = this.get("Date");
    return value!.toString();
  }

  set Date(value: string) {
    this.set("Date", Value.fromString(value));
  }
}
